unzip('att_faces.zip');
imds=imageDatastore('att_faces', ...
    'IncludeSubfolders',true,...
    'LabelSource','foldernames');
[imdsTrain, imdsValidation]=splitEachLabel(imds,0.7,'randomized');
numTrainimages=numel(imdsTrain.Labels);
idx=randperm(numTrainimages,16);
figure
for i =1:16
    subplot (4,4,i)
    I=readimage(imdsTrain,idx(i));
    imshow(I)
end
net=alexnet;
analyzeNetwork(net)
inputSize=net.Layers(1).InputSize
layersTransfer=net.Layers(1:end-3);
numClasses=numel(categories(imdsTrain.Labels))
layers=[
    layersTransfer
    fullyConnectedLayer(numClasses,'WeightlearnRateFactor',20,'BiasLearnRateFactor',20)
    softmaxLayer
    classificationLayer];
pixelRange=[-30 30];
imageAugmenter=imageDataAugmenter(...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
    'DataAugmentation',imageAugmenter,...
    'ColorPreprocessing', 'gray2rgb');


augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation,...
        'ColorPreprocessing', 'gray2rgb');

options = trainingOptions('sgdm', ...
    'MiniBatchSize',10, ...
    'MaxEpochs',6, ...
    'InitialLearnRate',1e-4, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',3, ...
    'Verbose',false, ...
    'Plots','training-progress');
netTransfer = trainNetwork(augimdsTrain,layers,options);

[YPred,scores] = classify(netTransfer,augimdsValidation);

idx = randperm(numel(imdsValidation.Files),4);
figure
for i = 1:4
    subplot(2,2,i)
    I = readimage(imdsValidation,idx(i));
    imshow(I)
    label = YPred(idx(i));
    title(string(label));
end

YValidation = imdsValidation.Labels;
accuracy = mean(YPred == Yvalidation)




RESULT WITH O.7 /.30 VALIDATION SPLIT= 85.83%





RESULT WITH .80/.20 SPLIT FOR THE VALIDATION = 90 %


